generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  slug        String   @unique
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal  @default(0.00) @db.Decimal(8, 2)
  rating      Decimal  @default(0.00) @db.Decimal(3, 2)
  numReviews  Int      @map("num_reviews")
  isFeatured  Boolean  @default(false) @map("is_featured")
  banner      String?

  @@map("products")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  name          String
  email         String    @unique
  emailVerified Boolean   @map("email_verified")
  image         String?
  role          UserRole
  banned        Boolean?
  banReason     String?   @map("ban_reason")
  banExpires    DateTime? @map("ban_expires")

  sessions Session[]
  accounts Account[]
  cart     Cart[]

  @@map("users")
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  expiresAt      DateTime @map("expires_at")
  token          String   @unique
  ipAddress      String?  @map("ip_address")
  userAgent      String?  @map("user_agent")
  impersonatedBy String?  @map("impersonated_by")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  @@map("sessions")
}

model Account {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  @@map("accounts")
}

model Verification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @map("updated_at")

  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")

  @@map("verifications")
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sessionCartId Int?    @map("session_cart_id")
  items         Json[]  @default([])
  itemsPrice    Decimal @map("items_price") @db.Decimal(12, 2)
  totalPrice    Decimal @map("total_price") @db.Decimal(12, 2)
  shippingPrice Decimal @map("shipping_price") @db.Decimal(12, 2)
  taxPrice      Decimal @map("tax_price") @db.Decimal(12, 2)

  userId Int?  @map("user_id")
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}
